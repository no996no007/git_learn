#! /usr/bin/env python
import rospy
import rosnode
import math
import numpy as np
import tf.transformations as tft
from std_msgs.msg import Bool
from nav_msgs.msg import Odometry
from gazebo_msgs.msg import ModelState
from gazebo_msgs.srv import GetModelState

model_odom_pub = rospy.Publisher('/position_control',Odometry,queue_size=10)
trigger_pub = rospy.Publisher('/start_flag',Bool,queue_size=10)
get_model_state = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
body_pose_msg = ModelState() #uav body pose
last_body_pose_msg = ModelState() 
drone_state = get_model_state('ardrone','world')
odom = Odometry()

current_point=0
checkpoints=[
    [8.5,4.0,1.95],
    [9.8,3.6,1.95],
    [9.3,1.0,1.95],
    [8.8,-3.0,1.95],
    [6.9,-3.2,1.95],
    [6.0,-5.2,1.95],
    [3.06,-4.0,1.95],
    [-2.9,-4.6,1.95],
    [-4.9,-4.6,1.95],
    [-9.5,-3.6,1.95],
    [-9.5,-1.6,1.95],
    [-6.0,-1.6,1.95],
    [-6.0,0.5,1.95], #要改
    [-8.5,1.6,1.95], #
    [-7.5,5.0,1.95],
    [-2.5,5.3,1.95],
    [1.38,5.3,1.95],
    [3.00,5.3,1.95],
    [5.50,3.90,1.95],
    [5.50,1.50,1.95],
    [8.40,1.50,1.95]
]

# 初始化全部置0
body_pose_msg.twist.linear.x = 0
body_pose_msg.twist.linear.y = 0
body_pose_msg.twist.linear.z = 0
last_body_pose_msg.twist.linear.x = body_pose_msg.twist.linear.x
last_body_pose_msg.twist.linear.y = body_pose_msg.twist.linear.y
last_body_pose_msg.twist.linear.z = body_pose_msg.twist.linear.z
body_pose_msg.twist.angular.x = 0
body_pose_msg.twist.angular.y = 0
body_pose_msg.twist.angular.z = 0
last_body_pose_msg.twist.angular.x = body_pose_msg.twist.angular.x
last_body_pose_msg.twist.angular.y = body_pose_msg.twist.angular.y
last_body_pose_msg.twist.angular.z = body_pose_msg.twist.angular.z

# 以下为功能函数

# 设置世界坐标系的速度
def set_body_zlinear_speed(z):
    global odom,drone_state,body_pose_msg,last_body_pose_msg
    body_pose_msg.twist.linear.z = z
    last_body_pose_msg.twist.linear.z = body_pose_msg.twist.linear.z

def set_body_xlinear_speed(x):
    global odom,drone_state,body_pose_msg,last_body_pose_msg
    body_pose_msg.twist.linear.x = x
    last_body_pose_msg.twist.linear.x = body_pose_msg.twist.linear.x

def set_body_ylinear_speed(y):
    global odom,drone_state,body_pose_msg,last_body_pose_msg
    body_pose_msg.twist.linear.y = y
    last_body_pose_msg.twist.linear.y = body_pose_msg.twist.linear.y

v_last_x = 0.0
v_last_y = 0.0
v_last_z = 0.0
w_last_x = 0.0
w_last_y = 0.0
w_last_z = 0.0
acc_x = 0.0
acc_y = 0.0
acc_z = 0.0
acc_w_x=0.0
acc_w_y=0.0
acc_w_z=0.0
t_last=0
z_error=[] # 对高度使用pi控制，这个列表用于记录之前的10帧高度差

# 给予一个指定点与偏航角，用P控制直线运动到世界坐标系的某点
def set_world_linear_by_dst_point(xyzo):
    global odom,drone_state,body_pose_msg,last_body_pose_msg
    global t_last
    global v_last_x
    global v_last_y
    global v_last_z
    global w_last_x
    global w_last_y
    global w_last_z
    global acc_x
    global acc_y
    global acc_z
    global acc_w_x
    global acc_w_y
    global acc_w_z
    t_now = rospy.Time.now()
    dt = (t_now - t_last).to_sec()
    drone_state = get_model_state('ardrone','world')

    v_last_x = drone_state.twist.linear.x #获取真实当前速度
    v_last_y = drone_state.twist.linear.y
    v_last_z = drone_state.twist.linear.z
    v_last = math.sqrt(v_last_x**2 + v_last_y**2 + v_last_z**2) #计算实际速度

    print(v_last,"\n")

    xx=xyzo[0] #这是目标坐标（世界）
    yy=xyzo[1]
    zz=xyzo[2]

    rx=(xx-drone_state.pose.position.x) #这是当前坐标指向目标坐标的向量（世界）
    ry=(yy-drone_state.pose.position.y)
    rz=(zz-drone_state.pose.position.z)

    # 单独对z实施pi控制
    z_error.insert(0,rz*dt)
    if len(z_error)>10:
        z_error.pop() #维持z_error列表长度为10
    odom.twist.twist.linear.z = 3*rz+0.03*np.sum(z_error)
    
    # distance = math.sqrt(rx**2 + ry**2 + rz**2)

    # if(distance<=2.5):
        
    # odom.twist.twist.linear.z = 999*rz
    # odom.twist.twist.linear.x = 999*rx #设置一个极大的反向速度，command会自动取最大反向加速度
    # odom.twist.twist.linear.y = 999*ry

    # # 如果当前速度朝向目标点，且全速减速来不及刹停时，立即全速减速！
    # if (distance<0.25*(v_last**2)) and (rx*v_last_x>=-0.05) and (ry*v_last_y>=-0.05) and (rz*v_last_z>=-0.05):
    #     odom.twist.twist.linear.x = -999*rx #设置一个极大的反向速度，command会自动取最大反向加速度
    #     odom.twist.twist.linear.y = -999*ry
    #     odom.twist.twist.linear.z = -999*rz



    # # yaw=xyzo[2]
    # x=0.5
    # maxv=1
    # Kp=maxv/x # 即在x米以内才开始减速，其他时候全速(为3)前进！
    # x_speed=(xx-drone_state.pose.position.x)*Kp
    # y_speed=(yy-drone_state.pose.position.y)*Kp
    # z_speed=(zz-drone_state.pose.position.z)*Kp
    # max_speed=max(np.abs([x_speed,y_speed,z_speed]))
    # if(abs(max_speed)>maxv):
    #     x_speed=maxv*x_speed/abs(max_speed)
    #     y_speed=maxv*y_speed/abs(max_speed)
    #     z_speed=maxv*z_speed/abs(max_speed)
    # else:
    #     x_speed=x_speed*abs(x_speed)/abs(max_speed)
    #     y_speed=y_speed*abs(y_speed)/abs(max_speed)
    #     z_speed=z_speed*abs(z_speed)/abs(max_speed)

    # odom.twist.twist.linear.x = x_speed
    # odom.twist.twist.linear.y = y_speed
    # odom.twist.twist.linear.z = z_speed

    quaternion_uav = (drone_state.pose.orientation.w, drone_state.pose.orientation.x, drone_state.pose.orientation.y, drone_state.pose.orientation.z)
    euler_angles = tft.euler_from_quaternion(quaternion_uav, 'sxyz') # yaw
    if(euler_angles[0]>=0):
        uav_yaw = math.pi - euler_angles[0]
    if(euler_angles[0]<0):
        uav_yaw = -math.pi - euler_angles[0]
    
    # print(uav_yaw,"\n")

    odom.twist.twist.angular.x = drone_state.twist.angular.x
    odom.twist.twist.angular.y = drone_state.twist.angular.y
    if(abs(uav_yaw)<3.13):
        odom.twist.twist.angular.z = 2*abs(3.141592-abs(uav_yaw))*uav_yaw/abs(uav_yaw) # 暂时使它一直朝向yaw=3.14的位置
    if(current_point==0):
        if max(np.abs([rx,ry,rz]))<0.02: # 第一个点最大距离差小于0.02判断为到达目的
            return True
        else:
            return False
    else:
        if max(np.abs([rx,ry]))<0.05: # 最大距离差小于0.05判断为到达目的
            return True
        else:
            return False

# 维护无人机状态时，只需要维护修改的速度状态，位置状态不需要被修改，读了什么就设置为什么。
def keep_model_position():
    global odom,drone_state,body_pose_msg,last_body_pose_msg
    odom.pose.pose.position.x = drone_state.pose.position.x
    odom.pose.pose.position.y = drone_state.pose.position.y
    odom.pose.pose.position.z = drone_state.pose.position.z

    odom.pose.pose.orientation.w = drone_state.pose.orientation.w
    odom.pose.pose.orientation.x = drone_state.pose.orientation.x
    odom.pose.pose.orientation.y = drone_state.pose.orientation.y
    odom.pose.pose.orientation.z = drone_state.pose.orientation.z

# 修改物体坐标系下的速度变量后调用，该函数将依据物体坐标系下的速度覆写相对应的世界坐标系速度
def set_world_twist_by_body_speed():
    #--------------------------------------------------
    # 以下部分完全从keyboard中copy的，进行一些发布前的设置，不需要做更改。
    # orientation ---> euler
    global odom,drone_state,body_pose_msg,last_body_pose_msg
    quaternion_uav = (drone_state.pose.orientation.w, drone_state.pose.orientation.x, drone_state.pose.orientation.y, drone_state.pose.orientation.z)
    euler_angles = tft.euler_from_quaternion(quaternion_uav, 'sxyz') # yaw
    if(euler_angles[0]>=0):
        uav_yaw = math.pi - euler_angles[0]
    if(euler_angles[0]<0):
        uav_yaw = -math.pi - euler_angles[0]

    # body ---> world
    rotation_matrix_z = np.matrix([[math.cos(uav_yaw),-math.sin(uav_yaw),0],[math.sin(uav_yaw),math.cos(uav_yaw),0],[0,0,1]])
    body_vel_matrix = np.matrix([last_body_pose_msg.twist.linear.x, last_body_pose_msg.twist.linear.y, last_body_pose_msg.twist.linear.z])
    body_vel_matrix_trans = body_vel_matrix.T
    world_vel_matrix = rotation_matrix_z.dot(body_vel_matrix_trans)

    #这个文件只修改无人机的速度
    odom.twist.twist.linear.x = world_vel_matrix[0]
    odom.twist.twist.linear.y = world_vel_matrix[1]
    odom.twist.twist.linear.z = world_vel_matrix[2]

    odom.twist.twist.angular.x = drone_state.twist.angular.x
    odom.twist.twist.angular.y = drone_state.twist.angular.y
    odom.twist.twist.angular.z = last_body_pose_msg.twist.angular.z
    #--------------------------------------------------


if __name__ == '__main__':
    try:
        # 这个全局变量要声明一下！
        rospy.init_node('controller')
        rospy.logwarn("controller loaded!!!!\n")
        rosnode.kill_nodes(['keyboard_control'])
        t_last = rospy.Time.now()
        rate = rospy.Rate(10000)

        while not rospy.is_shutdown():
            # rospy.sleep(0.01)
            # rospy.loginfo("controller running")
            drone_state = get_model_state('ardrone','world')
            # print(drone_state.pose.orientation.z,"\n")
            # print(odom.pose.pose.position.x)

            #------------------------------------------------------
            # 这个控制器只需要对以下几个变量进行修改即可实现运动控制！！
            # 这个body_pose_msg与是无人机的坐标系下的xyz轴的方向的平动速度与轴速度！！！
            # 想让它速度为多少从这下面开始写

            is_checked = set_world_linear_by_dst_point(checkpoints[current_point])
            if(is_checked): # 如果到了下次就去下一个点
                current_point+=1
                current_point%=len(checkpoints)
                if(current_point==0): # 如果下一个点是其实悬停点那么跳过
                    current_point+=1
                print(current_point)
            # body_pose_msg.twist.linear.z = 3
            # last_body_pose_msg.twist.linear.z = body_pose_msg.twist.linear.z
            if(current_point):
                trigger_pub.publish(True)
            #------------------------------------------------------
            # 根据世界坐标系的速度发布修改
            keep_model_position()
            # print(odom.pose.pose.position.x)
            model_odom_pub.publish(odom)
            # rate.sleep()

    except rospy.ROSInterruptException:
        pass

