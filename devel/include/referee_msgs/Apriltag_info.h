// Generated by gencpp from file referee_msgs/Apriltag_info.msg
// DO NOT EDIT!


#ifndef REFEREE_MSGS_MESSAGE_APRILTAG_INFO_H
#define REFEREE_MSGS_MESSAGE_APRILTAG_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace referee_msgs
{
template <class ContainerAllocator>
struct Apriltag_info_
{
  typedef Apriltag_info_<ContainerAllocator> Type;

  Apriltag_info_()
    : tag_num(0)
    , tag_pos_x(0.0)
    , tag_pos_y(0.0)
    , tag_pos_z(0.0)  {
    }
  Apriltag_info_(const ContainerAllocator& _alloc)
    : tag_num(0)
    , tag_pos_x(0.0)
    , tag_pos_y(0.0)
    , tag_pos_z(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _tag_num_type;
  _tag_num_type tag_num;

   typedef float _tag_pos_x_type;
  _tag_pos_x_type tag_pos_x;

   typedef float _tag_pos_y_type;
  _tag_pos_y_type tag_pos_y;

   typedef float _tag_pos_z_type;
  _tag_pos_z_type tag_pos_z;





  typedef boost::shared_ptr< ::referee_msgs::Apriltag_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::referee_msgs::Apriltag_info_<ContainerAllocator> const> ConstPtr;

}; // struct Apriltag_info_

typedef ::referee_msgs::Apriltag_info_<std::allocator<void> > Apriltag_info;

typedef boost::shared_ptr< ::referee_msgs::Apriltag_info > Apriltag_infoPtr;
typedef boost::shared_ptr< ::referee_msgs::Apriltag_info const> Apriltag_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::referee_msgs::Apriltag_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::referee_msgs::Apriltag_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::referee_msgs::Apriltag_info_<ContainerAllocator1> & lhs, const ::referee_msgs::Apriltag_info_<ContainerAllocator2> & rhs)
{
  return lhs.tag_num == rhs.tag_num &&
    lhs.tag_pos_x == rhs.tag_pos_x &&
    lhs.tag_pos_y == rhs.tag_pos_y &&
    lhs.tag_pos_z == rhs.tag_pos_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::referee_msgs::Apriltag_info_<ContainerAllocator1> & lhs, const ::referee_msgs::Apriltag_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace referee_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::referee_msgs::Apriltag_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::referee_msgs::Apriltag_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::referee_msgs::Apriltag_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d3ba812331b080d7cb19d457f299caf";
  }

  static const char* value(const ::referee_msgs::Apriltag_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d3ba812331b080dULL;
  static const uint64_t static_value2 = 0x7cb19d457f299cafULL;
};

template<class ContainerAllocator>
struct DataType< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "referee_msgs/Apriltag_info";
  }

  static const char* value(const ::referee_msgs::Apriltag_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 tag_num\n"
"float32 tag_pos_x\n"
"float32 tag_pos_y\n"
"float32 tag_pos_z\n"
;
  }

  static const char* value(const ::referee_msgs::Apriltag_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_num);
      stream.next(m.tag_pos_x);
      stream.next(m.tag_pos_y);
      stream.next(m.tag_pos_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Apriltag_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::referee_msgs::Apriltag_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::referee_msgs::Apriltag_info_<ContainerAllocator>& v)
  {
    s << indent << "tag_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tag_num);
    s << indent << "tag_pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.tag_pos_x);
    s << indent << "tag_pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.tag_pos_y);
    s << indent << "tag_pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.tag_pos_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFEREE_MSGS_MESSAGE_APRILTAG_INFO_H
